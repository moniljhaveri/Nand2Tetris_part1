// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    Mux16(a=instruction, b=aluOut, sel=instruction[15], out=outAReg); 
    ARegister(in=outAReg, load=instruction[5], out=aReg); //A register
    Mux16(a=inM, b=aReg, sel=instruction[15], out=alu1);
    Not16(in=aluOut, out=notAlu);
    Mux4Way16(a=aluOut, b=notAlu, c=notAlu, d=aReg, sel[0]=ng, sel[1]=zr, out=dReg);
    DRegister(in=dReg, load=instruction[4], out=alu2); //D register
    ALU(x=alu1, y=alu2, zx=instruction[6], nx=instruction[7], zy=instruction[8], ny=instruction[9], f=instruction[10]], no=instruction[11], out=aluOut, zr=zr, ng=ng); 
    Or(a=instruction[3], b=false, out=outWriteM);
    Mux(b=outWriteM, a=false, sel=instruction[15], out=writeM);
    Or16(a=aluOut, b=false, out=outM);
    Or16(a=aReg, b=false, out[0..14]=addressM); 
    And(a=instruction[0], b=instruction[1], out=load1);
    And(a=load1, b=instruction[2], out=load);
    Not(in=load, out=notLoad);
    PC(in=aReg, reset=false, load=load, inc=notLoad, out[0..14]=pc, out[15]=pc1);

}